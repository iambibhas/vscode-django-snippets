{
    "Model": {
        "prefix": "Model",
        "description": "Django Model class snippet",
        "body": [
            "class ${Name}(models.Model):",
            "    $1",
            "",
            "    def __str__(self):",
            "        return $2",
            "",
            "    def __unicode__(self):",
            "        return $2",
            ""
        ]
    },
    "Model Admin": {
        "prefix": "class Django ModelAdmin",
        "desciption": "Django ModelAdmin class snippet",
        "body": [
            "class ${Name}Admin(admin.ModelAdmin):",
            "    list_display = ('$1',)",
            "",
            "admin.site.register(${Name}, ${Name}Admin)",
            ""
        ]
    },

    "Model Admin Decorator":{
    "prefix": "madmindec",
    "body": [
      "@admin.register(${name:ModelName})",
      "class Admin${name:ModelName}(admin.ModelAdmin):",
      "  pass",
      ""
    ],
    "description": "Model Admin using Decorator"
    },

    "Blank and Null Field Properties": {
        "prefix": "blank and null Djngo Field",
        "desciption": "Django Blank and Null model field properties snippet",
        "body": [
            "blank=True, null=True"
        ]
    },
    "CharField": {
        "prefix": "CharField",
        "desciption": "Django CharField snippet",
        "body": [
            "${name} = models.CharField(max_length=${length}, ${blank=True, null=True})"
        ]
    },
    "Foreign Key": {
        "prefix": "ForeignKeyField",
        "description": "Django ForeignKeyField snippet",
        "body": [
            "${name} = models.ForeignKey('${TargetModel}', related_name='$1', on_delete=models.CASCADE)"
        ]
    },
    "Override Save Method": {
        "prefix": "save method Django Override",
        "description": "Django override save() method of models",
        "body": [
            "def save(self, *args, **kwargs):",
            "   $1",
            "   super(${ModelName}, self).save(*args, **kwargs) # Call the real save() method"
        ]
    },
    "View": {
        "prefix": "View",
        "description": "Django generic class based View",
        "body": [
            "class ${Name}View(View):",
            "    def get(self, request, *args, **kwargs):",
            "        return HttpResponse('GET request!')",
            "",
            "    def post(self, request, *args, **kwargs):",
            "        return HttpResponse('POST request!')"
        ]
    },
    "ListView": {
        "prefix": "ListView",
        "description": "Django generic ListView",
        "body": [
            "class ${ModelName}List(ListView):",
            "    model = ${ModelName}",
            "    context_object_name = '$1'",
            "    template_name='$2'"
        ]
    },
    "DetailView": {
        "prefix": "DetailView",
        "description": "Django generic DetailView",
        "body": [
            "class ${ModelName}Detail(DetailView):",
            "    model = ${ModelName}",
            "    template_name='$2'"
        ]
    },
    "get_context_data": {
        "prefix": "get_context_data",
        "description": "Django get_context_data for generic views",
        "body": [
            "def get_context_data(self, **kwargs):",
            "    context = super(${ViewName}, self).get_context_data(**kwargs)",
            "    return context"
        ]
    },
    "__init__": {
        "prefix": "__init__",
        "description": "__init__() method",
        "body": [
            "__init__(self, *args, **kwargs):",
            "$1"
        ]
    },
    "traceback": {
        "prefix": "Traceback",
        "description": "Print Traceback",
        "body": [
            "import traceback; traceback.print_exc();"
        ]
    },
    "pdb": {
        "prefix": "pdb",
        "description": "PDB breakpoint",
        "body": [
            "import pdb ; pdb.set_trace()"
        ]
    },
    "ipdb": {
        "prefix": "ipdb",
        "description": "IPDB breakpoint",
        "body": [
            "import ipdb ; ipdb.set_trace()"
        ]
    }
}